{"ast":null,"code":"var _jsxFileName = \"D:\\\\github projects\\\\Resturent-Oders-mangment-system\\\\Resturent Oders Managment\\\\src\\\\components\\\\StartingPage\\\\AvailableMeals.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport classes from \"./AvailableMeal.module.css\";\nimport Card from \"../UI/Card\";\nimport MealItem from \"./MealItem/MealItem\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AvailableMeals = () => {\n  _s();\n\n  const [meals, setMeals] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [httpError, setHttpError] = useState();\n  useEffect(() => {\n    const fetchMeals = async () => {\n      // setIsLoading(true);\n      const response = await fetch(\"https://react-http-45b45-default-rtdb.firebaseio.com/orders.json\");\n\n      if (!response.ok) {\n        throw new Error(\"something went wrong\");\n      }\n\n      const responseData = await response.json();\n      const loadedMeals = []; // for (let i = 0; i < responseData.orderedItems.length; i++) {\n      //   item.push({ itemcol: responseData.orderedItems[i].name });\n      //   console.log(item);\n      // }\n\n      let items;\n      items = responseData[key].orderedItems.length;\n\n      for (const key in responseData) {\n        loadedMeals.push({\n          id: key,\n          name: responseData[key].user.name,\n          street: responseData[key].user.street,\n          postalcode: responseData[key].user.postalCode,\n          city: responseData[key].user.city,\n          ItemName: responseData[key].orderedItems[items].name,\n          Quentity: responseData[key].orderedItems[0].amount\n        });\n      }\n\n      setMeals(loadedMeals);\n      setIsLoading(false);\n    };\n\n    fetchMeals().catch(error => {\n      setIsLoading(false);\n      setHttpError(error.message);\n    });\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.mealsLoading,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (httpError) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.mealsError,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: httpError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n\n  const melasList = meals.map(meal => /*#__PURE__*/_jsxDEV(MealItem, {\n    id: meal.id,\n    name: meal.name,\n    street: meal.street,\n    postalcode: meal.postalcode,\n    city: meal.city,\n    ItemName: meal.ItemName,\n    Quentity: meal.Quentity\n  }, meal.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.meals,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Street\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"PostalCode\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"City\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Item Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Quantity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), melasList]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AvailableMeals, \"6pndJp/WWpMtmhSnoCH9k0tFnXc=\");\n\n_c = AvailableMeals;\nexport default AvailableMeals;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"sources":["D:/github projects/Resturent-Oders-mangment-system/Resturent Oders Managment/src/components/StartingPage/AvailableMeals.js"],"names":["React","classes","Card","MealItem","useEffect","useState","AvailableMeals","meals","setMeals","isLoading","setIsLoading","httpError","setHttpError","fetchMeals","response","fetch","ok","Error","responseData","json","loadedMeals","items","key","orderedItems","length","push","id","name","user","street","postalcode","postalCode","city","ItemName","Quentity","amount","catch","error","message","mealsLoading","mealsError","melasList","map","meal"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,EAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,UAAU,GAAG,YAAY;AAC7B;AACA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,kEAD0B,CAA5B;;AAIA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACD;;AACD,YAAMC,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAA3B;AACA,YAAMC,WAAW,GAAG,EAApB,CAV6B,CAY7B;AACA;AACA;AACA;;AACA,UAAIC,KAAJ;AAEAA,MAAAA,KAAK,GAAGH,YAAY,CAACI,GAAD,CAAZ,CAAkBC,YAAlB,CAA+BC,MAAvC;;AAEA,WAAK,MAAMF,GAAX,IAAkBJ,YAAlB,EAAgC;AAC9BE,QAAAA,WAAW,CAACK,IAAZ,CAAiB;AACfC,UAAAA,EAAE,EAAEJ,GADW;AAEfK,UAAAA,IAAI,EAAET,YAAY,CAACI,GAAD,CAAZ,CAAkBM,IAAlB,CAAuBD,IAFd;AAGfE,UAAAA,MAAM,EAAEX,YAAY,CAACI,GAAD,CAAZ,CAAkBM,IAAlB,CAAuBC,MAHhB;AAIfC,UAAAA,UAAU,EAAEZ,YAAY,CAACI,GAAD,CAAZ,CAAkBM,IAAlB,CAAuBG,UAJpB;AAKfC,UAAAA,IAAI,EAAEd,YAAY,CAACI,GAAD,CAAZ,CAAkBM,IAAlB,CAAuBI,IALd;AAMfC,UAAAA,QAAQ,EAAEf,YAAY,CAACI,GAAD,CAAZ,CAAkBC,YAAlB,CAA+BF,KAA/B,EAAsCM,IANjC;AAOfO,UAAAA,QAAQ,EAAEhB,YAAY,CAACI,GAAD,CAAZ,CAAkBC,YAAlB,CAA+B,CAA/B,EAAkCY;AAP7B,SAAjB;AASD;;AAED3B,MAAAA,QAAQ,CAACY,WAAD,CAAR;AACAV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAlCD;;AAoCAG,IAAAA,UAAU,GAAGuB,KAAb,CAAoBC,KAAD,IAAW;AAC5B3B,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,YAAY,CAACyB,KAAK,CAACC,OAAP,CAAZ;AACD,KAHD;AAID,GAzCQ,EAyCN,EAzCM,CAAT;;AA2CA,MAAI7B,SAAJ,EAAe;AACb,wBACE;AAAS,MAAA,SAAS,EAAER,OAAO,CAACsC,YAA5B;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,MAAI5B,SAAJ,EAAe;AACb,wBACE;AAAS,MAAA,SAAS,EAAEV,OAAO,CAACuC,UAA5B;AAAA,6BACE;AAAA,kBAAI7B;AAAJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,QAAM8B,SAAS,GAAGlC,KAAK,CAACmC,GAAN,CAAWC,IAAD,iBAC1B,QAAC,QAAD;AACE,IAAA,EAAE,EAAEA,IAAI,CAACjB,EADX;AAGE,IAAA,IAAI,EAAEiB,IAAI,CAAChB,IAHb;AAIE,IAAA,MAAM,EAAEgB,IAAI,CAACd,MAJf;AAKE,IAAA,UAAU,EAAEc,IAAI,CAACb,UALnB;AAME,IAAA,IAAI,EAAEa,IAAI,CAACX,IANb;AAOE,IAAA,QAAQ,EAAEW,IAAI,CAACV,QAPjB;AAQE,IAAA,QAAQ,EAAEU,IAAI,CAACT;AARjB,KAEOS,IAAI,CAACjB,EAFZ;AAAA;AAAA;AAAA;AAAA,UADgB,CAAlB;AAYA,sBACE;AAAS,IAAA,SAAS,EAAEzB,OAAO,CAACM,KAA5B;AAAA,2BACE,QAAC,IAAD;AAAA,6BACE;AAAA,gCACE;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAUGkC,SAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CA9FD;;GAAMnC,c;;KAAAA,c;AAgGN,eAAeA,cAAf","sourcesContent":["import React from \"react\";\r\nimport classes from \"./AvailableMeal.module.css\";\r\nimport Card from \"../UI/Card\";\r\nimport MealItem from \"./MealItem/MealItem\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst AvailableMeals = () => {\r\n  const [meals, setMeals] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [httpError, setHttpError] = useState();\r\n\r\n  useEffect(() => {\r\n    const fetchMeals = async () => {\r\n      // setIsLoading(true);\r\n      const response = await fetch(\r\n        \"https://react-http-45b45-default-rtdb.firebaseio.com/orders.json\"\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"something went wrong\");\r\n      }\r\n      const responseData = await response.json();\r\n      const loadedMeals = [];\r\n\r\n      // for (let i = 0; i < responseData.orderedItems.length; i++) {\r\n      //   item.push({ itemcol: responseData.orderedItems[i].name });\r\n      //   console.log(item);\r\n      // }\r\n      let items;\r\n      \r\n      items = responseData[key].orderedItems.length;\r\n\r\n      for (const key in responseData) {\r\n        loadedMeals.push({\r\n          id: key,\r\n          name: responseData[key].user.name,\r\n          street: responseData[key].user.street,\r\n          postalcode: responseData[key].user.postalCode,\r\n          city: responseData[key].user.city,\r\n          ItemName: responseData[key].orderedItems[items].name,\r\n          Quentity: responseData[key].orderedItems[0].amount,\r\n        });\r\n      }\r\n\r\n      setMeals(loadedMeals);\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchMeals().catch((error) => {\r\n      setIsLoading(false);\r\n      setHttpError(error.message);\r\n    });\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <section className={classes.mealsLoading}>\r\n        <p>Loading....</p>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  if (httpError) {\r\n    return (\r\n      <section className={classes.mealsError}>\r\n        <p>{httpError}</p>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  const melasList = meals.map((meal) => (\r\n    <MealItem\r\n      id={meal.id}\r\n      key={meal.id}\r\n      name={meal.name}\r\n      street={meal.street}\r\n      postalcode={meal.postalcode}\r\n      city={meal.city}\r\n      ItemName={meal.ItemName}\r\n      Quentity={meal.Quentity}\r\n    />\r\n  ));\r\n  return (\r\n    <section className={classes.meals}>\r\n      <Card>\r\n        <table>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Street</th>\r\n            <th>PostalCode</th>\r\n            <th>City</th>\r\n            <th>Item Name</th>\r\n            <th>Quantity</th>\r\n            <th>Status</th>\r\n          </tr>\r\n          {melasList}\r\n        </table>\r\n      </Card>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default AvailableMeals;\r\n"]},"metadata":{},"sourceType":"module"}